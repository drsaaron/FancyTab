/*
 * TabCloseButton.java
 *
 * Created on January 26, 2007, 2:33 PM
 */

package com.blazartech.utils.gui.fancytab;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.plaf.ComponentUI;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A button to be shown that will close a tab when clicked.
 *
 * @author  Dr. Scott E. Aaron
 * @version $Id: TabCloseButton.java 36 2015-04-23 19:56:54Z aar1069 $
 */

/* $Log: TabCloseButton.java,v $
/* Revision 1.4  2007/06/28 20:17:40  aar1069
/* Update the "are you sure" message.
/*
/* Revision 1.3  2007/06/28 19:08:38  aar1069
/* Added CVS info and change log.
/*
 *******************************************************************************/

class TabCloseButton extends JButton {
    private static final int SIZE = 17;
    
    private static final Logger logger = LoggerFactory.getLogger(TabCloseButton.class);
    
    /** Creates new form BeanForm */
    public TabCloseButton() {
        logger.info("creating tab button");
        initComponents();
    }

    /**
     * Resets the UI property to a value from the current look and
     * feel.
     * 
     * 
     * @see JComponent#updateUI
     */
    @Override
    public void updateUI() {
    }

    /**
     * Calls the UI delegate's paint method, if the UI delegate
     * is non-<code>null</code>.  We pass the delegate a copy of the
     * <code>Graphics</code> object to protect the rest of the
     * paint code from irrevocable changes
     * (for example, <code>Graphics.translate</code>).
     * <p>
     * If you override this in a subclass you should not make permanent
     * changes to the passed in <code>Graphics</code>. For example, you
     * should not alter the clip <code>Rectangle</code> or modify the
     * transform. If you need to do these operations you may find it
     * easier to create a new <code>Graphics</code> from the passed in
     * <code>Graphics</code> and manipulate it. Further, if you do not
     * invoker super's implementation you must honor the opaque property,
     * that is
     * if this component is opaque, you must completely fill in the background
     * in a non-opaque color. If you do not honor the opaque property you
     * will likely see visual artifacts.
     * <p>
     * The passed in <code>Graphics</code> object might
     * have a transform other than the identify transform
     * installed on it.  In this case, you might get
     * unexpected results if you cumulatively apply
     * another transform.
     * 
     * 
     * @param g the <code>Graphics</code> object to protect
     * @see #paint
     * @see ComponentUI
     */
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g.create();
        
        if (getModel().isPressed()) {
            g2.translate(1,1);
        }
        
        g2.setStroke(new BasicStroke(2));
        g2.setColor(Color.BLACK);
        if (getModel().isRollover()) {
            g2.setColor(Color.MAGENTA);
        }
        
        int delta = 6;
        g2.drawLine(delta, delta, getWidth() - delta - 1, getHeight() - delta - 1);
        g2.drawLine(getWidth() - delta - 1, delta, delta, getHeight() - delta - 1);
        g2.dispose();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setToolTipText("Close tab");
        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setBorderPainted(false);
        setContentAreaFilled(false);
        setFocusable(false);
        setPreferredSize(new Dimension(SIZE, SIZE));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        int i = getTabbedPane().indexOfTabComponent(getParent());
        boolean doRemove = false;
        if (i != -1) {
            if (isConfirmClose()) {
                int areYouSure = JOptionPane.showConfirmDialog(this, "Are you sure you wish to close the tab?", "Question", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (areYouSure == JOptionPane.YES_OPTION) {
                    doRemove = true;
                }
            } else {
                doRemove = true;
            }
            
            if (doRemove) { getTabbedPane().remove(i); }
        } else {
            System.out.println("can't remove tab....");
        }
    }//GEN-LAST:event_formMouseClicked

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        setBorderPainted(false);
        getModel().setRollover(false);
    }//GEN-LAST:event_formMouseExited

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        setBorderPainted(true);
        getModel().setRollover(true);
    }//GEN-LAST:event_formMouseEntered
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * Holds value of property tabbedPane.
     */
    private JTabbedPane tabbedPane;

    /**
     * Getter for property tabbedPane.
     * @return Value of property tabbedPane.
     */
    public JTabbedPane getTabbedPane() {
        return this.tabbedPane;
    }

    /**
     * Setter for property tabbedPane.
     * @param tabbedPane New value of property tabbedPane.
     */
    public void setTabbedPane(JTabbedPane tabbedPane) {
        this.tabbedPane = tabbedPane;
    }

    /**
     * Holds value of property confirmClose.
     */
    private boolean confirmClose = false;

    /**
     * Getter for property confirmClose.
     * @return Value of property confirmClose.
     */
    public boolean isConfirmClose() {
        return this.confirmClose;
    }

    /**
     * Setter for property confirmClose.
     * @param confirmClose New value of property confirmClose.
     */
    public void setConfirmClose(boolean confirmClose) {
        this.confirmClose = confirmClose;
    }
    
}
