/*
 * FancyTabbedPane.java
 *
 * Created on April 18, 2007, 12:40 PM
 */

package com.blazartech.utils.gui.fancytab;

import java.awt.Color;
import javax.swing.JTabbedPane;

/**
 * A specialization of a JTabbedPane that will have a bit fancier tabs, including
 * a close button.
 *
 * @author  Dr. Scott E. Aaron
 * @id $Id: FancyTabbedPane.java 36 2015-04-23 19:56:54Z aar1069 $
 */

/* $Log: FancyTabbedPane.java,v $
/* Revision 1.5  2007/08/03 15:42:17  aar1069
/* format fix
/*
/* Revision 1.4  2007/08/03 15:35:26  aar1069
/* Add new properties for active and inactive colors.  When a tab is selected, it's label color should be updated to the active color, and all others to the inactive color.  This allows the user to clearly see which tab is currently selected.
/*
/* Revision 1.3  2007/06/28 20:17:06  aar1069
/* Set the confirmClose property on the new tab
/*
/* Revision 1.2  2007/06/28 19:07:22  aar1069
/* Added the confirmClose property; if this is set to true, the user will be asked to confirm the tab should be closed.
/*
 *******************************************************************************/

public class FancyTabbedPane extends JTabbedPane {
    
    /** Creates new form BeanForm */
    public FancyTabbedPane() {
        initComponents();
        getModel().addChangeListener(new TabbedPaneStateChangeListener(this));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                formComponentAdded(evt);
            }
        });
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents
    
    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange
        // TODO add your handling code here:
        if (evt.getPropertyName().equals("confirmClose")) {
            updateConfirmClose();
        }
    }//GEN-LAST:event_formPropertyChange
    
    private void updateConfirmClose() {
        int tabCount = getTabCount();
        for (int i = 0; i < tabCount; i++) {
            FancyTabTitlePanel p = (FancyTabTitlePanel) getTabComponentAt(i);
            p.setConfirmClose(isConfirmClose());
        }
    }
    
    private void formComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentAdded
        // TODO add your handling code here:
        int i = indexOfComponent(evt.getChild());
        if (i != -1) {
            FancyTabTitlePanel title = new FancyTabTitlePanel();
            title.setConfirmClose(isConfirmClose());
            title.setTabbedPane(this);
            title.setTitle(getTitleAt(i));
            setTabComponentAt(i, title);
        }
    }//GEN-LAST:event_formComponentAdded
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    /**
     * Holds value of property confirmClose.
     */
    private boolean confirmClose = false;
    
    /**
     * Getter for property confirmClose.
     * @return Value of property confirmClose.
     */
    public boolean isConfirmClose() {
        return this.confirmClose;
    }
    
    /**
     * Setter for property confirmClose.
     * @param confirmClose New value of property confirmClose.
     */
    public void setConfirmClose(boolean confirmClose) {
        boolean oldConfirmClose = this.confirmClose;
        this.confirmClose = confirmClose;
        firePropertyChange("confirmClose", oldConfirmClose, confirmClose);
    }
    
    /**
     * Holds value of property activeColor.
     */
    private Color activeColor = Color.BLUE;
    
    /**
     * Getter for property activeColor.
     * @return Value of property activeColor.
     */
    public Color getActiveColor() {
        return this.activeColor;
    }
    
    /**
     * Setter for property activeColor.
     * @param activeColor New value of property activeColor.
     */
    public void setActiveColor(Color activeColor) {
        this.activeColor = activeColor;
    }
    
    /**
     * Holds value of property inactiveColor.
     */
    private Color inactiveColor = Color.GRAY;
    
    /**
     * Getter for property inactiveColor.
     * @return Value of property inactiveColor.
     */
    public Color getInactiveColor() {
        return this.inactiveColor;
    }
    
    /**
     * Setter for property inactiveColor.
     * @param inactiveColor New value of property inactiveColor.
     */
    public void setInactiveColor(Color inactiveColor) {
        this.inactiveColor = inactiveColor;
    }
    
    
    
}
